// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make einterfaces-mocks`.

package mocks

import (
	einterfaces "github.com/mattermost/mattermost-server/v6/einterfaces"
	mock "github.com/stretchr/testify/mock"
)

// ComplianceExporterProduct is an autogenerated mock type for the ComplianceExporterProduct type
type ComplianceExporterProduct struct {
	mock.Mock
}

// Exporter provides a mock function with given fields: cursor, limit
func (_m *ComplianceExporterProduct) Exporter(cursor map[string]interface{}, limit int) (einterfaces.ComplianceExporter, map[string]interface{}, error) {
	ret := _m.Called(cursor, limit)

	var r0 einterfaces.ComplianceExporter
	if rf, ok := ret.Get(0).(func(map[string]interface{}, int) einterfaces.ComplianceExporter); ok {
		r0 = rf(cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(einterfaces.ComplianceExporter)
		}
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(map[string]interface{}, int) map[string]interface{}); ok {
		r1 = rf(cursor, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(map[string]interface{}, int) error); ok {
		r2 = rf(cursor, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
